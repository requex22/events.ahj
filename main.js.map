{"version":3,"file":"main.js","mappings":"yBAMY,ICNG,MACbA,cACEC,KAAKC,UAAY,EAEjBD,KAAKE,MACP,CAEAA,OACEF,KAAKG,YACLH,KAAKI,wBACLJ,KAAKK,qBACP,CAEAF,YACEG,SAASC,cAAc,QAAQC,mBAC7B,aACC,yDAKe,MAChB,IAAK,IAAIC,EAAI,EAAGA,EAAIT,KAAKC,UAAYD,KAAKC,UAAWQ,IACnDH,SAASC,cAAc,cAAcC,mBACnC,aACC,mEAIL,EAGFE,GACAV,KAAKW,gBACLX,KAAKY,gBAAgB,GACrBZ,KAAKa,eAAe,EACtB,CAEAF,gBACEL,SAASC,cAAc,QAAQC,mBAC7B,YACC,2MAQL,CAEAI,gBAAgBE,GACdR,SAASC,cAAc,QAAQC,mBAC7B,YACC,uGAEqDM,8CAI1D,CAEAD,eAAeE,GACbT,SAASC,cAAc,QAAQC,mBAC7B,YACC,sGAEoDO,8CAIzD,CAEAX,wBACE,IAAIY,EAEJ,MAAMC,EAAQC,MAAMC,KAAKb,SAASc,iBAAiB,iBAC7CC,EAAYf,SAASC,cAAc,cAEzCU,EAAMK,SAASC,IACbA,EAAKC,iBAAiB,SAAUC,IAC9B,OAAQA,EAAEC,OAAOC,UAAUC,OACzB,IAAK,OACHZ,EAAS,CAAEa,KAAM,OAAQC,KAAM,KAC/BT,EAAUU,MAAMC,QAAU,OAC1B,MACF,IAAK,SACHhB,EAAS,CAAEa,KAAM,SAAUC,KAAM,KACjCT,EAAUU,MAAMC,QAAU,OAC1B,MACF,IAAK,OACHhB,EAAS,CAAEa,KAAM,OAAQC,KAAM,KAC/BT,EAAUU,MAAMC,QAAU,OAG9BhC,KAAKiC,wBAAwBjB,EAAO,GACpC,GAEN,CAEAiB,wBAAwBC,GAMtB,MAAMC,EAAQjB,MAAMC,KAAKb,SAASc,iBAAiB,UAEnD,OAAOgB,aAAY,KACjBD,EAAMb,SAASC,GAASA,EAAKI,UAAUU,OAAO,oBAE9CF,EAVF,SAAyBG,EAAKC,GAC5B,IAAIC,EASkB,EATLC,KAAKC,UAAYH,EASZ,GARtB,OAAOE,KAAKE,MAAMH,EACpB,CAOQI,CAAgB,EAAGT,EAAMU,SAASlB,UAAUmB,IAAI,iBAAiB,GACtEZ,EAAIJ,KACT,CAEAzB,sBACE,MAAM8B,EAAQjB,MAAMC,KAAKb,SAASc,iBAAiB,UACnD,IAAIL,EAAQ,EAEZoB,EAAMb,SAASC,IACbA,EAAKC,iBAAiB,SAAS,KACxBD,EAAKI,UAAUoB,SAAS,kBAG3BhC,GAAS,EAFTT,SAASC,cAAc,WAAWyC,aAAe,EAKG,MAAlD1C,SAASC,cAAc,WAAWyC,cACpCC,MAAO,2BAA0BlC,KACjCmC,SAASC,SACX,GACA,GAEN,E","sources":["webpack://events-ahj/./src/index.js","webpack://events-ahj/./src/js/gamePlay.js"],"sourcesContent":["import \"./css/style.css\";\n\nimport gamePlay from \"./js/gamePlay\";\n\n// TODO: write your code in app.js\n\nconst app = new gamePlay();\n","export default class gamePlay {\n  constructor() {\n    this.gameBoard = 4;\n\n    this.init();\n  }\n\n  init() {\n    this.drawBoard();\n    this.difficultEventListner();\n    this.addCellEventListner();\n  }\n\n  drawBoard() {\n    document.querySelector(\"body\").insertAdjacentHTML(\n      \"afterbegin\",\n      `\n            <div class=\"gameBoard\"></div>\n        `\n    );\n\n    const drawCells = () => {\n      for (let i = 0; i < this.gameBoard * this.gameBoard; i++) {\n        document.querySelector(\".gameBoard\").insertAdjacentHTML(\n          \"afterbegin\",\n          `\n                    <div class=\"cell\"></div>\n                `\n        );\n      }\n    };\n\n    drawCells();\n    this.drawDiffBoard();\n    this.drawHealthBoard(5);\n    this.drawScoreBoard(0);\n  }\n\n  drawDiffBoard() {\n    document.querySelector(\"body\").insertAdjacentHTML(\n      \"beforeend\",\n      `\n            <div class=\"diffBoard\">\n                <p class=\"easy\">Легко</p>\n                <p class=\"medium\">Средне</p>\n                <p class=\"hard\">Сложно</p>\n            </div>\n        `\n    );\n  }\n\n  drawHealthBoard(health) {\n    document.querySelector(\"body\").insertAdjacentHTML(\n      \"beforeend\",\n      `\n            <div class=\"health-score\">\n                <p>Осталось попыток: <span class=\"health\">${health}</span> </p>\n            </div>\n        `\n    );\n  }\n\n  drawScoreBoard(score) {\n    document.querySelector(\"body\").insertAdjacentHTML(\n      \"beforeend\",\n      `\n            <div class=\"player-score\">\n                <p>Осталось попыток: <span class=\"score\">${score}</span> </p>\n            </div>\n        `\n    );\n  }\n\n  difficultEventListner() {\n    let result;\n\n    const diffs = Array.from(document.querySelectorAll(\".diffBoard p\"));\n    const diffBoard = document.querySelector(\".diffBoard\");\n\n    diffs.forEach((item) => {\n      item.addEventListener(\"click\", (e) => {\n        switch (e.target.classList.value) {\n          case \"easy\":\n            result = { name: \"easy\", time: 1000 };\n            diffBoard.style.display = \"none\";\n            break;\n          case \"medium\":\n            result = { name: \"medium\", time: 750 };\n            diffBoard.style.display = \"none\";\n            break;\n          case \"hard\":\n            result = { name: \"hard\", time: 500 };\n            diffBoard.style.display = \"none\";\n            break;\n        }\n        this.getRandomCellWithGoblin(result);\n      });\n    });\n  }\n\n  getRandomCellWithGoblin(obj) {\n    function getRandomNumber(min, max) {\n      let rand = min + Math.random() * (max - min);\n      return Math.floor(rand);\n    }\n\n    const cells = Array.from(document.querySelectorAll(\".cell\"));\n\n    return setInterval(() => {\n      cells.forEach((item) => item.classList.remove(\"cellWithGoblin\"));\n\n      cells[getRandomNumber(0, cells.length)].classList.add(\"cellWithGoblin\");\n    }, obj.time);\n  }\n\n  addCellEventListner() {\n    const cells = Array.from(document.querySelectorAll(\".cell\"));\n    let score = 0;\n\n    cells.forEach((item) => {\n      item.addEventListener(\"click\", () => {\n        if (!item.classList.contains(\"cellWithGoblin\")) {\n          document.querySelector(\".health\").textContent -= 1;\n        } else {\n          score += 2;\n        }\n\n        if (document.querySelector(\".health\").textContent === \"0\") {\n          alert(`Вы проиграли! Ваш счет: ${score}`);\n          location.reload();\n        }\n      });\n    });\n  }\n}\n"],"names":["constructor","this","gameBoard","init","drawBoard","difficultEventListner","addCellEventListner","document","querySelector","insertAdjacentHTML","i","drawCells","drawDiffBoard","drawHealthBoard","drawScoreBoard","health","score","result","diffs","Array","from","querySelectorAll","diffBoard","forEach","item","addEventListener","e","target","classList","value","name","time","style","display","getRandomCellWithGoblin","obj","cells","setInterval","remove","min","max","rand","Math","random","floor","getRandomNumber","length","add","contains","textContent","alert","location","reload"],"sourceRoot":""}